@using Microsoft.EntityFrameworkCore.Internal
@model BuckleUp.Models.ViewModels.AssessmentDetailsVM

@{
    Layout = "_DashboardLayout";
}

<h1>@Model.Assessment.Title</h1>

@if (User.IsInRole("Teacher"))
{
    ViewBag.SideBar = "_TeacherSideBar";

    @if (Model.Assessment.TeacherId.Equals(Model.TeacherId))
    {
        <h1>Questions</h1>
        @foreach (var question in Model.Assessment.Questions)
        {
            <h4>@question.QuestionText</h4>
            <div style="margin-left: 20px; display: none;">
                <h5>@question.Option1</h5>
                <h5>@question.Option2</h5>
                <h5>@question.Option3</h5>
                <h5>@question.Option4</h5>

                @{
                    string answer = question.GetType().GetProperty(question.CorrectOption).GetValue(question, null).ToString();
                }


                <h5>Correct Answer: @answer</h5>

            </div>
        }

        <div>
            <br/>
            <br/>
            <h1>Assigned Groups</h1>
            <hr>

            <form asp-action="AssignAssessment" method="post" class="mt-3 ml-4">
                <div class="form-group row" style="display: flex">


                    <input asp-for="AssessmentId" value=@Model.Assessment.Id hidden class="form-control"/>

                    <div class="ml-2 mr-2" style="display: flex; flex-direction: column">
                        <select asp-for="GroupId" class="form-control">
                            <option disabled selected>--Select an option--</option>
                            @foreach (var group in Model.Groups)
                            {
                                <option value=@group.Id>@group.Name </option>
                            }
                        </select>
                        <span asp-validation-for="GroupId" class="text-danger"></span>
                    </div>


                    <input type="submit" value="Assign" class="btn btn-primary"/>

                </div>
            </form>
            @if (!Model.Assessment.GroupAssessments.Any())
            {
                <p class="font-italic">Not assigned to any group</p>
            }
            else
            {
                <table class="table">
                    <tr>
                        <th>#</th>
                        <th>Group Name</th>
                        <th></th>
                    </tr>

                    @foreach (var assessmentGroups in Model.Assessment.GroupAssessments)
                    {
                        <tr>
                            <td>@(Model.Assessment.GroupAssessments.IndexOf(assessmentGroups) + 1)</td>
                            <td>@assessmentGroups.Group.Name</td>
                            <td style="display: flex; justify-content: space-around;">
                                <a asp-action="UnassignAssessment" 
                                   asp-route-id=@assessmentGroups.AssessmentId asp-route-groupId=@assessmentGroups.GroupId>
                                    <button class="btn btn-danger">Remove</button>
                                </a>
                                
                            </td>
                        </tr>
                    }
                </table>
            }
        </div>

        <br/>
        <br/>
        <h1>Students That Have Taken Assessment</h1>

        List<StudentAssessment> takenstudentAssessments = Model.Assessment.StudentAssessments.Where(stdass => stdass.HasTaken).ToList();
        List<StudentAssessment> untakenstudentAssessments = Model.Assessment.StudentAssessments.Where(stdass => stdass.HasTaken == false).ToList();

        <table class="table">
            <tr>
                <th>Student Name</th>
                <th>Score</th>
            </tr>
            @foreach (var studentAssessment in takenstudentAssessments)
            {
                <tr>
                    <td>@studentAssessment.Student.User.FirstName @studentAssessment.Student.User.LastName</td>
                    <td>@studentAssessment.score</td>
                </tr>
            }
        </table>


        <br/>
        <br/>
        <h1>Students That Have Not Assessment</h1>
        @if (untakenstudentAssessments.Count() == 0)
        {
            <p class="font-italic">All students have taken this assessment</p>
        }
        else
        {
            <table class="table">
                <tr>
                    <th>Student Name</th>
                </tr>
                @foreach (var studentAssessment in untakenstudentAssessments)
                {
                    <tr>
                        <td>@studentAssessment.Student.User.FirstName @studentAssessment.Student.User.LastName</td>
                    </tr>
                }
            </table>
        }
    }
}

else if (User.IsInRole("Student"))
{
    ViewBag.SideBar = "_StudentSideBar";

    StudentAssessment studentAssessment = Model.Assessment.StudentAssessments.FirstOrDefault(stdass => stdass.StudentId.Equals(Model.StudentId));

    bool studentIsRegisteredForAssessment = studentAssessment != null;

    if (studentIsRegisteredForAssessment && (!studentAssessment.HasTaken))
    {
        <a asp-controller="Assessment"
           asp-action="TakeAssessment"
           asp-route-id="@Model.Assessment.Id">
            <button class="btn btn-primary">Take Assessment</button>
        </a>
    }

    else if (studentIsRegisteredForAssessment && studentAssessment.HasTaken)
    {
        <button class="btn btn-light" disabled>Assessment Taken</button>
        <h3>You have taken this assessment. </h3>
        <h4>You scored @studentAssessment.score / @Model.Assessment.Questions.Count()</h4>
    }
}